<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Powerslacker</title>
    <link>http://example.org/tags/javascript/</link>
    <description>Recent content in Javascript on Powerslacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powerslacker</copyright>
    <lastBuildDate>Wed, 12 Jul 2017 20:55:03 -0700</lastBuildDate>
    
	<atom:link href="http://example.org/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Currying, What is it? Why is it Useful?</title>
      <link>http://example.org/currying-why-is-it-useful/</link>
      <pubDate>Wed, 12 Jul 2017 20:55:03 -0700</pubDate>
      
      <guid>http://example.org/currying-why-is-it-useful/</guid>
      <description>Currying. It can be a frightening word. Textbook examples of currying appear to be hieroglyphics to the untrained eye. It doesn&amp;rsquo;t help that textbooks examples of currying use poorly named variables such as x, y, foo, and bar. I recently got a good grasp of the basics of currying and figured I&amp;rsquo;d share my understanding. Currying can be considered part of the functional programming (FP, for short) paradigm. The goal of functional programming is to make code:</description>
    </item>
    
  </channel>
</rss>